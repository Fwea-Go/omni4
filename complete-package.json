# Complete Package.json for FWEA-I Project
## All dependencies and scripts needed for production deployment

```json
{
  "name": "fwea-i-audio-cleaning-platform",
  "version": "1.0.0",
  "description": "Professional audio cleaning platform with AI-powered multilingual profanity detection in 100+ languages",
  "main": "src/worker.js",
  "type": "module",
  "scripts": {
    "dev": "wrangler dev",
    "deploy": "wrangler deploy",
    "deploy:staging": "wrangler deploy --env staging",
    "deploy:production": "wrangler deploy --env production",
    "tail": "wrangler tail",
    "test": "jest",
    "test:watch": "jest --watch",
    "lint": "eslint src/",
    "lint:fix": "eslint src/ --fix",
    "format": "prettier --write src/",
    "build": "echo 'No build step required for Cloudflare Workers'",
    "setup:kv": "node scripts/setup-profanity-kv.js",
    "setup:db": "wrangler d1 execute fwea-database --file schema.sql",
    "backup:db": "wrangler d1 backup create fwea-database",
    "logs": "wrangler tail --format pretty",
    "health": "curl https://omnibackend2.fweago-flavaz.workers.dev/health",
    "clean": "rm -rf node_modules package-lock.json && npm install",
    "security": "npm audit",
    "update": "npm update && npm audit fix"
  },
  "keywords": [
    "audio-processing",
    "profanity-filter",
    "cloudflare-workers",
    "ai-transcription",
    "stripe-payments",
    "multilingual",
    "audio-cleaning",
    "content-moderation",
    "saas",
    "audio-editing"
  ],
  "author": "Your Name <your.email@example.com>",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/YOUR_USERNAME/fwea-i-platform.git"
  },
  "bugs": {
    "url": "https://github.com/YOUR_USERNAME/fwea-i-platform/issues"
  },
  "homepage": "https://fwea-i.com",
  "dependencies": {
    "stripe": "^14.25.0",
    "ahocorasick": "^1.0.2"
  },
  "devDependencies": {
    "wrangler": "^3.78.12",
    "@cloudflare/workers-types": "^4.20241011.0",
    "@types/node": "^20.16.5",
    "typescript": "^5.6.2",
    "eslint": "^9.11.1",
    "eslint-config-prettier": "^9.1.0",
    "prettier": "^3.3.3",
    "jest": "^29.7.0",
    "@types/jest": "^29.5.13",
    "jest-environment-miniflare": "^2.14.2",
    "miniflare": "^3.20241011.0"
  },
  "engines": {
    "node": ">=18.0.0",
    "npm": ">=9.0.0"
  },
  "browserslist": [
    "defaults",
    "not IE 11"
  ],
  "eslintConfig": {
    "env": {
      "browser": true,
      "es2022": true,
      "node": true,
      "worker": true
    },
    "extends": [
      "eslint:recommended",
      "prettier"
    ],
    "parserOptions": {
      "ecmaVersion": 2022,
      "sourceType": "module"
    },
    "globals": {
      "addEventListener": "readonly",
      "caches": "readonly",
      "crypto": "readonly",
      "fetch": "readonly",
      "Request": "readonly",
      "Response": "readonly",
      "URL": "readonly",
      "URLSearchParams": "readonly",
      "WebSocket": "readonly"
    },
    "rules": {
      "no-unused-vars": "warn",
      "no-console": "off",
      "prefer-const": "error",
      "no-var": "error",
      "object-shorthand": "error",
      "prefer-arrow-callback": "error"
    }
  },
  "prettier": {
    "semi": true,
    "trailingComma": "es5",
    "singleQuote": true,
    "printWidth": 100,
    "tabWidth": 2,
    "useTabs": false
  },
  "jest": {
    "testEnvironment": "miniflare",
    "testMatch": [
      "**/tests/**/*.test.js",
      "**/src/**/*.test.js"
    ],
    "collectCoverageFrom": [
      "src/**/*.js",
      "!src/**/*.test.js"
    ]
  }
}
```

## Additional Setup Files

### .gitignore
```gitignore
# Dependencies
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Build outputs
dist/
build/
.output/

# Environment files
.env
.env.local
.env.development.local
.env.test.local
.env.production.local
.dev.vars

# IDE files
.vscode/
.idea/
*.swp
*.swo
*~

# OS files
.DS_Store
Thumbs.db

# Logs
logs/
*.log

# Coverage
coverage/
.nyc_output/

# Temporary files
tmp/
temp/

# Wrangler
.wrangler/
wrangler.toml.backup

# Database
*.db
*.sqlite

# Audio files (for testing)
*.mp3
*.wav
*.flac
*.m4a
*.aac
*.ogg

# Secrets backup
secrets.txt
keys.txt
```

### .eslintignore
```
node_modules/
dist/
build/
.wrangler/
*.min.js
```

### .prettierignore
```
node_modules/
dist/
build/
.wrangler/
package-lock.json
*.min.js
*.min.css
```

### scripts/setup-profanity-kv.js
```javascript
#!/usr/bin/env node

/**
 * Script to populate KV namespace with profanity lists
 * Run with: npm run setup:kv
 */

import { execSync } from 'child_process';
import fs from 'fs';
import path from 'path';

// Profanity lists for multiple languages
const profanityData = {
  en: ['fuck', 'shit', 'damn', 'hell', 'bitch', 'ass', 'crap', 'piss', 'bastard', 'whore', 'asshole', 'dickhead', 'motherfucker'],
  es: ['mierda', 'joder', 'puta', 'cabrón', 'coño', 'gilipollas', 'pendejo', 'culero', 'hijo de puta'],
  fr: ['merde', 'putain', 'salope', 'connard', 'enculé', 'bordel', 'foutre', 'chiant', 'con'],
  de: ['scheiße', 'fick', 'arschloch', 'hure', 'verdammt', 'dummkopf', 'fotze', 'wichser'],
  it: ['merda', 'cazzo', 'puttana', 'stronzo', 'porco', 'figa', 'vaffanculo', 'bastardo'],
  pt: ['merda', 'porra', 'caralho', 'puta', 'filho da puta', 'buceta', 'cu', 'cacete'],
  ru: ['сука', 'блядь', 'говно', 'хуй', 'пизда', 'ебать', 'мудак', 'дерьмо'],
  zh: ['操', '妈的', '狗屎', '混蛋', '王八蛋', '婊子', '傻逼', '草泥马'],
  ar: ['كلب', 'حقير', 'وسخ', 'قذر', 'لعين', 'خنزير'],
  ja: ['くそ', 'ちくしょう', 'ばか', 'あほ', 'しね', 'やりまん'],
  ko: ['씨발', '개새끼', '존나', '병신', '좆', '창녀', '븅신'],
  hi: ['गंदू', 'रंडी', 'भोसड़ी', 'लौड़ा', 'चूतिया', 'मादरचोद'],
  tr: ['amk', 'orospu', 'piç', 'sik', 'göt', 'amcık', 'siktir'],
  nl: ['kut', 'lul', 'hoer', 'klootzak', 'tering', 'godverdomme'],
  pl: ['kurwa', 'pierdolić', 'chuj', 'suka', 'dupa', 'kurewska'],
  sv: ['fan', 'skit', 'fitta', 'kuk', 'hora', 'jävla'],
  da: ['lort', 'fanden', 'luder', 'pik', 'røv', 'kraftedeme'],
  no: ['faen', 'dritt', 'fitte', 'kuk', 'hore', 'helvete'],
  fi: ['vittu', 'paska', 'saatana', 'kyrpä', 'huora', 'perkele']
};

async function setupProfanityKV() {
  console.log('🚀 Setting up profanity lists in KV...');
  
  try {
    // Get KV namespace ID from wrangler.toml
    const wranglerConfig = fs.readFileSync('wrangler.toml', 'utf8');
    const kvIdMatch = wranglerConfig.match(/id\s*=\s*"([^"]+)"/);
    
    if (!kvIdMatch) {
      console.error('❌ Could not find KV namespace ID in wrangler.toml');
      console.log('Please create KV namespace first: wrangler kv:namespace create "PROFANITY_LISTS"');
      return;
    }
    
    const namespaceId = kvIdMatch[1];
    console.log(`📝 Using KV namespace: ${namespaceId}`);
    
    // Upload each language's profanity list
    for (const [lang, words] of Object.entries(profanityData)) {
      const key = `lists/${lang}.json`;
      const value = JSON.stringify(words);
      
      console.log(`📤 Uploading ${lang} (${words.length} words)...`);
      
      execSync(`wrangler kv:key put --namespace-id="${namespaceId}" "${key}" '${value}'`, {
        stdio: 'pipe'
      });
    }
    
    console.log('✅ All profanity lists uploaded successfully!');
    console.log(`📊 Uploaded ${Object.keys(profanityData).length} languages`);
    
    // Verify uploads
    console.log('🔍 Verifying uploads...');
    const listResult = execSync(`wrangler kv:key list --namespace-id="${namespaceId}"`, {
      encoding: 'utf8'
    });
    
    const keys = JSON.parse(listResult);
    console.log(`✅ Found ${keys.length} keys in KV namespace`);
    
  } catch (error) {
    console.error('❌ Error setting up profanity KV:', error.message);
    process.exit(1);
  }
}

// Run the setup
setupProfanityKV();
```

### GitHub Actions Workflow (.github/workflows/ci.yml)
```yaml
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run linting
        run: npm run lint
      
      - name: Run tests
        run: npm test
      
      - name: Security audit
        run: npm audit --audit-level=high

  deploy-staging:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to staging
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy --env staging

  deploy-production:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to production
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy --env production
      
      - name: Notify success
        if: success()
        run: |
          echo "✅ Production deployment successful!"
          # Add notification logic (Slack, Discord, etc.)
```

### tests/worker.test.js
```javascript
import { describe, it, expect, beforeAll } from '@jest/globals';

describe('FWEA-I Worker Tests', () => {
  beforeAll(async () => {
    // Setup test environment
  });

  it('should respond to health check', async () => {
    const request = new Request('http://localhost/health');
    const response = await worker.fetch(request, {
      AI: {},
      AUDIO_STORAGE: {},
      DB: {},
      PROFANITY_LISTS: {}
    });
    
    expect(response.status).toBe(200);
    const data = await response.json();
    expect(data.status).toBe('healthy');
  });

  it('should handle CORS preflight', async () => {
    const request = new Request('http://localhost/process-audio', {
      method: 'OPTIONS',
      headers: { 'Origin': 'https://fwea-i.com' }
    });
    
    const response = await worker.fetch(request, {});
    expect(response.status).toBe(200);
    expect(response.headers.get('Access-Control-Allow-Origin')).toBeTruthy();
  });

  it('should reject invalid file types', async () => {
    const formData = new FormData();
    formData.append('audio', new Blob(['test'], { type: 'text/plain' }), 'test.txt');
    
    const request = new Request('http://localhost/process-audio', {
      method: 'POST',
      body: formData
    });
    
    const response = await worker.fetch(request, {
      AUDIO_STORAGE: {},
      AI: {}
    });
    
    expect(response.status).toBe(400);
  });
});
```

## Installation and Setup Commands

```bash
# 1. Initialize project
npm install

# 2. Setup development environment
npm run dev

# 3. Setup KV profanity lists
npm run setup:kv

# 4. Setup database
npm run setup:db

# 5. Test health endpoint
npm run health

# 6. Deploy to production
npm run deploy:production

# 7. Monitor logs
npm run logs

# 8. Run tests
npm test

# 9. Security check
npm run security
```

This package.json provides a complete development and deployment environment with all necessary dependencies, scripts, and configurations for the FWEA-I platform.